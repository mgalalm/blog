<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on mgalalm - blog</title>
    <link>http://localhost:1313/categories/testing/</link>
    <description>Recent content in Testing on mgalalm - blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Dec 2024 21:30:02 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stubs Mocks Double and Spies When to Use One Over the Other?</title>
      <link>http://localhost:1313/posts/laravel/stubs-mocks-double-and-spies-when-to-use-one-over-the-other/</link>
      <pubDate>Sat, 07 Dec 2024 21:30:02 +0000</pubDate>
      <guid>http://localhost:1313/posts/laravel/stubs-mocks-double-and-spies-when-to-use-one-over-the-other/</guid>
      <description>&lt;p&gt;In software development, especially when working with frameworks like Laravel, unit testing is crucial for ensuring code reliability and maintainability. Laravel integrates well with Mockery, a mocking framework for PHP, to help developers create test doubles. Let&amp;rsquo;s delve into the concepts of Stubs, Mocks, Doubles, and Spies, and how they&amp;rsquo;re used in Laravel testing scenarios.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Turbocharge Your Code Coverage With Xdebug</title>
      <link>http://localhost:1313/posts/laravel/mastering-laravel-testing-turbocharge-your-code-coverage-with-xdebug/</link>
      <pubDate>Thu, 05 Dec 2024 19:57:18 +0000</pubDate>
      <guid>http://localhost:1313/posts/laravel/mastering-laravel-testing-turbocharge-your-code-coverage-with-xdebug/</guid>
      <description>&lt;p&gt;In the dynamic world of Laravel development, ensuring your code is well-tested isn&amp;rsquo;t just good practice; it&amp;rsquo;s essential for creating robust applications. &lt;strong&gt;Code coverage&lt;/strong&gt; serves as a critical metric to assess the extent to which your tests cover your codebase.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing Laravel Applications with Pest</title>
      <link>http://localhost:1313/posts/laravel/testing-laravel-with-pest/</link>
      <pubDate>Mon, 02 Dec 2024 15:48:00 -0800</pubDate>
      <guid>http://localhost:1313/posts/laravel/testing-laravel-with-pest/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;not-prose&#34;&gt;&#xA;&lt;figure&gt;&#xA;    &lt;img src=&#34;http://localhost:1313/images/laravel-pest.jpg&#34;&#xA;      alt=&#34;Laravel and Pest&#34; &#xA;      loading=&#34;lazy&#34;&#xA;    &gt;&#xA;  &lt;/figure&gt;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Testing is a critical part of software development, ensuring that applications behave as expected. Laravel, known for its elegant syntax and developer-friendly features, has been paired beautifully with Pest, an innovative testing framework for PHP. Here&amp;rsquo;s how to leverage Pest for writing tests in Laravel.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
